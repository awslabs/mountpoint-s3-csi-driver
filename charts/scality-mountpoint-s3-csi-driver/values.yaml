# Default values for ..
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: ghcr.io/scality/mountpoint-s3-csi-driver
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.1.0"

node:
  kubeletPath: /var/lib/kubelet
  mountpointInstallPath: /opt/mountpoint-s3-csi/bin/ # should end with "/"
  logLevel: 4
  seLinuxOptions:
    user: system_u
    type: super_t
    role: system_r
    level: s0
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    name: s3-csi-driver-sa
  nodeSelector: {}
  resources:
    requests:
      cpu: 10m
      memory: 40Mi
    limits:
      memory: 256Mi
  # Tolerates all taints and overrides defaultTolerations
  tolerateAllTaints: false
  defaultTolerations: true
  tolerations: []
  podInfoOnMountCompat:
    enable: false
  # S3 endpoint URL to use for all volume mounts (REQUIRED)
  # This is a sample value, replace with your own S3 endpoint
  s3EndpointUrl: "http://s3.example.com:8000"

sidecars:
  nodeDriverRegistrar:
    image:
      repository: k8s.gcr.io/sig-storage/csi-node-driver-registrar
      tag: v2.13.0
      pullPolicy: IfNotPresent
    env:
      - name: KUBE_NODE_NAME
        valueFrom:
          fieldRef:
            fieldPath: spec.nodeName
    volumeMounts:
      - name: plugin-dir
        mountPath: /csi
      - name: registration-dir
        mountPath: /registration
    resources: {}
  livenessProbe:
    image:
      repository: registry.k8s.io/sig-storage/livenessprobe
      tag: v2.15.0
      pullPolicy: IfNotPresent
    volumeMounts:
      - mountPath: /csi
        name: plugin-dir
    resources: {}


initContainer:
  installMountpoint:
    resources: {}

controller:
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    name: s3-csi-driver-controller-sa

mountpointPod:
  namespace: mount-s3
  priorityClassName: mount-s3-critical

nameOverride: ""
fullnameOverride: ""

imagePullSecrets: []

awsAccessSecret:
  name: aws-secret
  keyId: key_id
  accessKey: access_key
  sessionToken: session_token

experimental:
  podMounter: false
