# Source: aws-s3-csi-driver/templates/node.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: s3-csi-node
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "aws-s3-csi-driver.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app: s3-csi-node
      {{- include "aws-s3-csi-driver.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: s3-csi-node
        {{- include "aws-s3-csi-driver.labels" . | nindent 8 }}
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostPID: true
      serviceAccountName: {{ .Values.node.serviceAccount.name }}
      priorityClassName: system-node-critical
      tolerations:
        {{- if .Values.node.tolerateAllTaints }}
        - operator: Exists
        {{- else }}
        - key: CriticalAddonsOnly
          operator: Exists
        - operator: Exists
          effect: NoExecute
          tolerationSeconds: 300
        {{- end }}
        {{- with .Values.node.tolerations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      initContainers:
        - name: install-mountpoint
          image: {{ printf "%s%s:%s" (default "" .Values.image.containerRegistry) .Values.image.repository (default (printf "v%s" .Chart.AppVersion) (toString .Values.image.tag)) }}
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/install-mp"
          env:
            - name: MOUNTPOINT_INSTALL_DIR
              value: /target
          volumeMounts:
            - name: mp-install
              mountPath: /target
      containers:
        - name: s3-plugin
          image: {{ printf "%s%s:%s" (default "" .Values.image.containerRegistry) .Values.image.repository (default (printf "v%s" .Chart.AppVersion) (toString .Values.image.tag)) }}
          imagePullPolicy: IfNotPresent
          args:
            - --endpoint=$(CSI_ENDPOINT)
            - --logtostderr
            - --v=5
          env:
            - name: CSI_ENDPOINT
              value: unix:/csi/csi.sock
            - name: PTMX_PATH
              value: /host/dev/ptmx
            # mount-s3 runs in systemd context, so this is relative to the host
            - name: MOUNT_S3_PATH
              value: /opt/mountpoint-s3-csi/bin/mount-s3
            - name: CSI_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- with .Values.awsAccessSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .name }}
                  key: {{ .keyId }}
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .name }}
                  key: {{ .accessKey }}
                  optional: true
            {{- end }}
          volumeMounts:
            - name: kubelet-dir
              mountPath: /var/lib/kubelet
            - name: plugin-dir
              mountPath: /csi
            - name: systemd-bus
              mountPath: /run/systemd/private
            - name: host-dev
              mountPath: /host/dev
            - name: proc-mounts
              mountPath: /host/proc/mounts
          ports:
            - name: healthz
              containerPort: 9808
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 2
            failureThreshold: 5
        - name: node-driver-registrar
          image: {{ printf "%s:%s" .Values.sidecars.nodeDriverRegistrar.image.repository .Values.sidecars.nodeDriverRegistrar.image.tag }}
          imagePullPolicy: IfNotPresent
          args:
            - --csi-address=$(ADDRESS)
            - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/s3.csi.aws.com/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          livenessProbe:
            exec:
              command:
                - /csi-node-driver-registrar
                - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
                - --mode=kubelet-registration-probe
            initialDelaySeconds: 30
            timeoutSeconds: 15
            periodSeconds: 90
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
        - name: liveness-probe
          image: {{ printf "%s:%s" .Values.sidecars.livenessProbe.image.repository .Values.sidecars.livenessProbe.image.tag }}
          imagePullPolicy: IfNotPresent
          args:
            - --csi-address=/csi/csi.sock
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
      volumes:
        - name: host-dev
          hostPath:
            path: /dev/
            type: Directory
        - name: mp-install
          hostPath:
            path: /opt/mountpoint-s3-csi/bin/
            type: DirectoryOrCreate
        - name: proc-mounts
          hostPath:
            path: /proc/mounts
            type: File
        - name: systemd-bus
          hostPath:
            path: /run/systemd/private
            type: Socket
        - name: kubelet-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/s3.csi.aws.com/
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        {{- with .Values.node.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}