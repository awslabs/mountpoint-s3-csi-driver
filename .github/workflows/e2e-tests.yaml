name: E2E Tests

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      ref:
        required: true
        type: string
      run_upgrade_tests:
        required: false
        type: boolean
        description: "If true, only upgrade tests will run."
      upgrade_tests_old_version:
        required: false
        type: string
        description: "Only used if `run_upgrade_tests` is true, specifies the old version to test upgrade from."
      upgrade_tests_new_version:
        required: false
        type: string
        description: "Only used if `run_upgrade_tests` is true, specifies the new version to test upgrade to."

concurrency:
  group: e2e-cluster-${{ inputs.environment }}

env:
  IMAGE_NAME: "s3-csi-driver"
  BENCHMARK_ARTIFACTS_FOLDER: ".github/artifacts"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  BENCHMARK_BUCKET: "s3://${{ vars.BENCHMARK_BUCKET }}"
  TAG_UNTESTED: "untested_${{ inputs.ref }}"
  TAG_PASSED: "test_passed_${{ inputs.ref }}"
jobs:
  build_matrix:
    name: Build Matrix
    uses: ./.github/workflows/build_matrix.yaml
  build:
    runs-on: ubuntu-22.04 # FIXME - https://github.com/actions/runner-images/issues/11471
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR Private Repository
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          PLATFORM: "linux/amd64,linux/arm64"
          TAG: "${{ env.TAG_UNTESTED }}"
        run: |
          make -j `nproc` all-push-skip-if-present
  test:
    needs: ["build", "build_matrix"]
    strategy:
      # Failing fast causes some resources created during the test to leak,
      # so we disable it to ensure all resources created during test are properly cleaned up.
      fail-fast: false
      matrix: ${{ fromJson(needs.build_matrix.outputs.matrix) }}
    runs-on: ubuntu-22.04 # FIXME - https://github.com/actions/runner-images/issues/11471
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: "${{ vars.AWS_REGION }}"
      CLUSTER_TYPE: "${{ matrix.cluster-type }}"
      ARCH: "${{ matrix.arch }}"
      AMI_FAMILY: "${{ matrix.family }}"
      TAG: "untested_${{ inputs.ref }}"
      K8S_VERSION: "${{ matrix.kubernetes-version }}"
      SELINUX_MODE: "${{ matrix.selinux-mode }}"
      MOUNTPOINT_CSI_DRIVER_PREVIOUS_VERSION: "${{ inputs.upgrade_tests_old_version }}"
      MOUNTPOINT_CSI_DRIVER_NEW_VERSION: "${{ inputs.upgrade_tests_new_version }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          persist-credentials: false
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          # Upgrade tests takes around 3 hours to run to ensure they hit multiple credential refresh cycles.
          # That's why we're increasing the AWS credential duration here compared to regular end-to-end tests.
          # See comments on top of `UPGRADE_TEST_DURATION_IN_MINUTES` constant in `tests/e2e-kubernetes/testsuites/upgrade.go`.
          role-duration-seconds: ${{ inputs.run_upgrade_tests && 14400 || 7200 }}
      - name: Install tools
        env:
          ACTION: "install_tools"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Create cluster
        env:
          ACTION: "create_cluster"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Update kubeconfig
        env:
          ACTION: "update_kubeconfig"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Install the driver
        env:
          ACTION: "install_driver"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Run E2E Tests
        env:
          ACTION: "${{ inputs.run_upgrade_tests && 'run_upgrade_tests' || 'run_tests' }}"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Post e2e cleanup
        if: always()
        env:
          ACTION: "e2e_cleanup"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Uninstall the driver
        if: always()
        env:
          ACTION: "uninstall_driver"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
      - name: Delete cluster
        if: always()
        env:
          ACTION: "delete_cluster"
        run: |
          tests/e2e-kubernetes/scripts/run.sh
  post_test:
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Mark tests as passed
        env:
          AWS_REGION: "${{ vars.AWS_REGION }}"
          REPOSITORY: "${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}"
          REPOSITORY_NAME: "${{ env.IMAGE_NAME }}"
        run: |
          docker buildx imagetools create --tag ${REPOSITORY}:${TAG_PASSED} ${REPOSITORY}:${TAG_UNTESTED}
          for ARCH in amd64 arm64; do
            MANIFEST=$(aws ecr batch-get-image --repository-name ${REPOSITORY_NAME} \
              --image-ids imageTag=${TAG_UNTESTED}-linux-${ARCH}-amazon \
              --region ${AWS_REGION} --query 'images[].imageManifest' --output text)

            aws ecr put-image \
              --repository-name ${REPOSITORY_NAME} \
              --image-tag ${TAG_PASSED}-linux-${ARCH}-amazon \
              --image-manifest "$MANIFEST" \
              --region ${AWS_REGION} 2>&1 | grep -q "ImageAlreadyExistsException" || \
              { err=$?; [ $err -eq 1 ] || exit $err; }
          done
