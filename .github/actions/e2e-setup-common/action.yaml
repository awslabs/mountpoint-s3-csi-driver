name: "Setup Common"
description: "Common setup steps for E2E tests"
inputs:
  ref:
    description: "Git ref to checkout"
    required: true

runs:
  using: "composite"
  steps:
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}

    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io/scality
        username: "${{ github.repository_owner }}"
        password: "${{ github.token }}"

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: "tests/e2e/go.mod"
        cache: true

    - name: Install Ginkgo CLI
      shell: bash
      run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

    - name: Create Kind Cluster
      uses: helm/kind-action@v1.12.0
      with:
        wait: 90s
        cluster_name: helm-test-cluster

    - name: Setup Helm
      uses: azure/setup-helm@v4.3.0

    - name: Pull Container Images and Download GO Dependencies in Parallel
      shell: bash
      run: |
        # Start Docker pulls in parallel
        docker pull ghcr.io/${{ github.repository }}:${{ github.sha }} &
        DRIVER_PID=$!

        docker pull ghcr.io/scality/cloudserver:${CLOUDSERVER_TAG} &
        CLOUDSERVER_PID=$!

        # Start Go dependency download in parallel
        (cd tests/e2e && go mod download) &
        GO_DEPS_PID=$!

        # Wait for all operations to complete
        wait $DRIVER_PID || { echo "❌ Driver image pull failed"; exit 1; }
        wait $CLOUDSERVER_PID || { echo "❌ CloudServer image pull failed"; exit 1; }
        wait $GO_DEPS_PID || { echo "❌ Go dependencies download failed"; exit 1; }

    - name: Load CSI Driver into KIND and Deploy Cloudserver (S3)
      shell: bash
      run: |-
        kind load docker-image ghcr.io/${{ github.repository }}:${{ github.sha }} --name helm-test-cluster
        set -e -o pipefail;
        mkdir -p logs/s3
        chown -R runner:docker logs
        docker compose --profile s3 up -d --quiet-pull
        bash ../scripts/wait_for_local_port.bash 8000 30
      working-directory: .github/scality-storage-deployment
