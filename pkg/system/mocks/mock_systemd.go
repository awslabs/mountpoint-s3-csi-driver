// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/system/systemd.go

// Package mock_system is a generated GoMock package.
package mock_system

import (
	context "context"
	reflect "reflect"

	system "github.com/awslabs/mountpoint-s3-csi-driver/pkg/system"
	dbus "github.com/godbus/dbus/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockDbusConn is a mock of DbusConn interface.
type MockDbusConn struct {
	ctrl     *gomock.Controller
	recorder *MockDbusConnMockRecorder
}

// MockDbusConnMockRecorder is the mock recorder for MockDbusConn.
type MockDbusConnMockRecorder struct {
	mock *MockDbusConn
}

// NewMockDbusConn creates a new mock instance.
func NewMockDbusConn(ctrl *gomock.Controller) *MockDbusConn {
	mock := &MockDbusConn{ctrl: ctrl}
	mock.recorder = &MockDbusConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbusConn) EXPECT() *MockDbusConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDbusConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDbusConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDbusConn)(nil).Close))
}

// Object mocks base method.
func (m *MockDbusConn) Object(dest string, path dbus.ObjectPath) dbus.BusObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object", dest, path)
	ret0, _ := ret[0].(dbus.BusObject)
	return ret0
}

// Object indicates an expected call of Object.
func (mr *MockDbusConnMockRecorder) Object(dest, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockDbusConn)(nil).Object), dest, path)
}

// Signal mocks base method.
func (m *MockDbusConn) Signal(ch chan<- *dbus.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Signal", ch)
}

// Signal indicates an expected call of Signal.
func (mr *MockDbusConnMockRecorder) Signal(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signal", reflect.TypeOf((*MockDbusConn)(nil).Signal), ch)
}

// MockDbusObject is a mock of DbusObject interface.
type MockDbusObject struct {
	ctrl     *gomock.Controller
	recorder *MockDbusObjectMockRecorder
}

// MockDbusObjectMockRecorder is the mock recorder for MockDbusObject.
type MockDbusObjectMockRecorder struct {
	mock *MockDbusObject
}

// NewMockDbusObject creates a new mock instance.
func NewMockDbusObject(ctrl *gomock.Controller) *MockDbusObject {
	mock := &MockDbusObject{ctrl: ctrl}
	mock.recorder = &MockDbusObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbusObject) EXPECT() *MockDbusObjectMockRecorder {
	return m.recorder
}

// Go mocks base method.
func (m *MockDbusObject) Go(method string, flags dbus.Flags, ch chan *dbus.Call, args ...any) *dbus.Call {
	m.ctrl.T.Helper()
	varargs := []interface{}{method, flags, ch}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Go", varargs...)
	ret0, _ := ret[0].(*dbus.Call)
	return ret0
}

// Go indicates an expected call of Go.
func (mr *MockDbusObjectMockRecorder) Go(method, flags, ch interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method, flags, ch}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Go", reflect.TypeOf((*MockDbusObject)(nil).Go), varargs...)
}

// MockSystemdConnection is a mock of SystemdConnection interface.
type MockSystemdConnection struct {
	ctrl     *gomock.Controller
	recorder *MockSystemdConnectionMockRecorder
}

// MockSystemdConnectionMockRecorder is the mock recorder for MockSystemdConnection.
type MockSystemdConnectionMockRecorder struct {
	mock *MockSystemdConnection
}

// NewMockSystemdConnection creates a new mock instance.
func NewMockSystemdConnection(ctrl *gomock.Controller) *MockSystemdConnection {
	mock := &MockSystemdConnection{ctrl: ctrl}
	mock.recorder = &MockSystemdConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemdConnection) EXPECT() *MockSystemdConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSystemdConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSystemdConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSystemdConnection)(nil).Close))
}

// IsClosed mocks base method.
func (m *MockSystemdConnection) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockSystemdConnectionMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockSystemdConnection)(nil).IsClosed))
}

// ListUnits mocks base method.
func (m *MockSystemdConnection) ListUnits(ctx context.Context) ([]*system.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnits", ctx)
	ret0, _ := ret[0].([]*system.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnits indicates an expected call of ListUnits.
func (mr *MockSystemdConnectionMockRecorder) ListUnits(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnits", reflect.TypeOf((*MockSystemdConnection)(nil).ListUnits), ctx)
}

// Signal mocks base method.
func (m *MockSystemdConnection) Signal(ch chan<- *dbus.Signal) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Signal", ch)
}

// Signal indicates an expected call of Signal.
func (mr *MockSystemdConnectionMockRecorder) Signal(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signal", reflect.TypeOf((*MockSystemdConnection)(nil).Signal), ch)
}

// StartTransientUnit mocks base method.
func (m *MockSystemdConnection) StartTransientUnit(ctx context.Context, name, mode string, props []system.DbusProperty) (dbus.ObjectPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransientUnit", ctx, name, mode, props)
	ret0, _ := ret[0].(dbus.ObjectPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransientUnit indicates an expected call of StartTransientUnit.
func (mr *MockSystemdConnectionMockRecorder) StartTransientUnit(ctx, name, mode, props interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransientUnit", reflect.TypeOf((*MockSystemdConnection)(nil).StartTransientUnit), ctx, name, mode, props)
}

// StopUnit mocks base method.
func (m *MockSystemdConnection) StopUnit(ctx context.Context, unitName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopUnit", ctx, unitName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopUnit indicates an expected call of StopUnit.
func (mr *MockSystemdConnectionMockRecorder) StopUnit(ctx, unitName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopUnit", reflect.TypeOf((*MockSystemdConnection)(nil).StopUnit), ctx, unitName)
}

// MockSystemdSupervisorFactory is a mock of SystemdSupervisorFactory interface.
type MockSystemdSupervisorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSystemdSupervisorFactoryMockRecorder
}

// MockSystemdSupervisorFactoryMockRecorder is the mock recorder for MockSystemdSupervisorFactory.
type MockSystemdSupervisorFactoryMockRecorder struct {
	mock *MockSystemdSupervisorFactory
}

// NewMockSystemdSupervisorFactory creates a new mock instance.
func NewMockSystemdSupervisorFactory(ctrl *gomock.Controller) *MockSystemdSupervisorFactory {
	mock := &MockSystemdSupervisorFactory{ctrl: ctrl}
	mock.recorder = &MockSystemdSupervisorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemdSupervisorFactory) EXPECT() *MockSystemdSupervisorFactoryMockRecorder {
	return m.recorder
}

// StartSupervisor mocks base method.
func (m *MockSystemdSupervisorFactory) StartSupervisor() (system.SystemdSupervisor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSupervisor")
	ret0, _ := ret[0].(system.SystemdSupervisor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSupervisor indicates an expected call of StartSupervisor.
func (mr *MockSystemdSupervisorFactoryMockRecorder) StartSupervisor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSupervisor", reflect.TypeOf((*MockSystemdSupervisorFactory)(nil).StartSupervisor))
}

// MockSystemdSupervisor is a mock of SystemdSupervisor interface.
type MockSystemdSupervisor struct {
	ctrl     *gomock.Controller
	recorder *MockSystemdSupervisorMockRecorder
}

// MockSystemdSupervisorMockRecorder is the mock recorder for MockSystemdSupervisor.
type MockSystemdSupervisorMockRecorder struct {
	mock *MockSystemdSupervisor
}

// NewMockSystemdSupervisor creates a new mock instance.
func NewMockSystemdSupervisor(ctrl *gomock.Controller) *MockSystemdSupervisor {
	mock := &MockSystemdSupervisor{ctrl: ctrl}
	mock.recorder = &MockSystemdSupervisorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemdSupervisor) EXPECT() *MockSystemdSupervisorMockRecorder {
	return m.recorder
}

// IsConnectionClosed mocks base method.
func (m *MockSystemdSupervisor) IsConnectionClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnectionClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnectionClosed indicates an expected call of IsConnectionClosed.
func (mr *MockSystemdSupervisorMockRecorder) IsConnectionClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnectionClosed", reflect.TypeOf((*MockSystemdSupervisor)(nil).IsConnectionClosed))
}

// RunOneshot mocks base method.
func (m *MockSystemdSupervisor) RunOneshot(ctx context.Context, config *system.ExecConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunOneshot", ctx, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunOneshot indicates an expected call of RunOneshot.
func (mr *MockSystemdSupervisorMockRecorder) RunOneshot(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunOneshot", reflect.TypeOf((*MockSystemdSupervisor)(nil).RunOneshot), ctx, config)
}

// StartService mocks base method.
func (m *MockSystemdSupervisor) StartService(ctx context.Context, config *system.ExecConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartService", ctx, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartService indicates an expected call of StartService.
func (mr *MockSystemdSupervisorMockRecorder) StartService(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockSystemdSupervisor)(nil).StartService), ctx, config)
}

// Stop mocks base method.
func (m *MockSystemdSupervisor) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSystemdSupervisorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSystemdSupervisor)(nil).Stop))
}
